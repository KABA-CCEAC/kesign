{
  "name": "squirrel",
  "description": "A furry little helper for dealing with optional NPM dependencies",
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@sidelab.com"
  },
  "tags": [
    "dependency",
    "optional",
    "npm"
  ],
  "version": "0.1.1",
  "engines": {
    "node": ">= 0.6.x < 0.9.0"
  },
  "dependencies": {
    "async": "0.1.x",
    "debug": "*",
    "read": "0.1.x",
    "underscore": "1.3.x"
  },
  "devDependencies": {
    "expect.js": "0.1.x",
    "mocha": "1.2.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/DamonOehlman/squirrel.git"
  },
  "bugs": {
    "url": "http://github.com/DamonOehlman/squirrel/issues"
  },
  "scripts": {
    "test": "node_modules/mocha/bin/mocha --reporter spec --timeout 10000"
  },
  "contributors": [],
  "readme": "# squirrel\n\nSquirrel is a helpful node module that assists you requiring your dependencies for plugins of your application (version controlled via a custom `pluginDependencies` in your `package.json` file).\n\n<a href=\"http://travis-ci.org/#!/DamonOehlman/squirrel\"><img src=\"https://secure.travis-ci.org/DamonOehlman/squirrel.png\" alt=\"Build Status\"></a>\n\n## Why Squirrel?\n\nBecause personally, I really don't like the sitting waiting for a node package to install a whole swag of dependencies because it requires them for some functionality that I don't intend to use.  I believe using squirrel will enable certain types of packages to have a leaner core with properly managed and installable optional dependencies.\n\n## Example Usage\n\nIf you are using `optionalDependencies` in your application, you might consider using `pluginDependencies` instead and then \"squirreling\" them rather than requiring them.  (__NOTE:__ Squirreling is an asynchronous operation):\n\n```js\nvar squirrel = require('squirrel');\n\nsquirrel('coffee-script', function(err, coffee) {\n    // do something magical with coffeescript...\n});\n```\n\nIf you need multiple modules, then squirrel is happy to play in a way similar to the way AMD module loaders do:\n\n```js\nsquirrel(['coffee-script', 'jade'], function(err, coffee, jade) {\n    // do something with both coffeescript and jade...\n});\n```\n\n## Squirrel Options\n\nA squirrel's got to have options.  The demands on the modern squirrel mean that having options is important, and this squirrel is not different.  Here are the options that squirrel supports in a 2nd (optional) argument.\n\n```js\n// initialise the squirrel defaults\nsquirrel.defaults = {\n    // whether or not the interactive process that will allow the user to request \n    // the package will be installed or not\n    allowInstall: false,\n    \n    // initialise the prompt message\n    promptMessage: 'Package \"<%= target %>\" is required. Permit installation? ',\n    \n    // the current working directory in which npm will be run to install the package\n    cwd: basePath, // defaults to the directory the squirrel parent package.json has been located in\n    \n    // the path to the installer, by default we are hoping `npm` will exist in the PATH\n    installer: 'npm',\n    \n    // install command\n    installCommand: '<%= opts.installer %> install <%= target %>@<%= version %>',\n    \n    // uninstall command\n    uninstallCommand: '<%= opts.installer %> rm <%= target %>'\n};\n```\n\nThe default options can be modified through modifying them in the `squirrel.defaults` object.\n\n## Shouldn't Squirrel be dependency free?\n\nYou could argue that given squirrel's mission is to reduce the overall number of package dependencies, it should be ultralight in it's own packaging.  While that's a valid point, I think a balance is required and using existing well-tested libraries is important.\n",
  "_id": "squirrel@0.1.1",
  "_from": "squirrel@0.1.x"
}
